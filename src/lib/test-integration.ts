import { ContasService } from '@/services/contas-service';
import { MovimentacoesService } from '@/services/movimentacoes-service';
import { initializeTables } from './database';

export async function testIntegration() {
  try {
    console.log('üß™ Iniciando testes de integra√ß√£o...');
    
    // Inicializar banco
    await initializeTables();
    
    const contasService = new ContasService();
    const movimentacoesService = new MovimentacoesService();
    
    // Teste 1: Criar conta
    console.log('üìù Teste 1: Criando conta corrente...');
    const contaData = {
      company_id: '123e4567-e89b-12d3-a456-426614174000',
      tipo_conta: 'conta_corrente',
      descricao: 'Conta Corrente Teste',
      banco_id: '001',
      banco_nome: 'Banco do Brasil',
      banco_codigo: '001',
      numero_agencia: '1234',
      numero_conta: '12345-6',
      tipo_pessoa: 'fisica',
      saldo_inicial: 1000.00,
      data_saldo: '2024-01-01',
      created_by: '123e4567-e89b-12d3-a456-426614174001'
    };
    
    const conta = await contasService.createConta(contaData);
    console.log('‚úÖ Conta criada:', conta.id);
    
    // Teste 2: Criar movimenta√ß√£o de entrada
    console.log('üí∞ Teste 2: Criando movimenta√ß√£o de entrada...');
    const movimentacaoEntrada = await movimentacoesService.createMovimentacao({
      conta_id: conta.id,
      tipo_movimentacao: 'entrada',
      valor_entrada: 500.00,
      descricao: 'Dep√≥sito teste',
      data_movimentacao: new Date().toISOString(),
      created_by: '123e4567-e89b-12d3-a456-426614174001'
    });
    console.log('‚úÖ Movimenta√ß√£o de entrada criada:', movimentacaoEntrada.id);
    
    // Teste 3: Criar movimenta√ß√£o de sa√≠da
    console.log('üí∏ Teste 3: Criando movimenta√ß√£o de sa√≠da...');
    const movimentacaoSaida = await movimentacoesService.createMovimentacao({
      conta_id: conta.id,
      tipo_movimentacao: 'saida',
      valor_saida: 100.00, // Valor menor para n√£o dar erro de saldo
      descricao: 'Saque teste',
      data_movimentacao: new Date().toISOString(),
      created_by: '123e4567-e89b-12d3-a456-426614174001'
    });
    console.log('‚úÖ Movimenta√ß√£o de sa√≠da criada:', movimentacaoSaida.id);
    
    // Teste 4: Verificar saldo atual
    console.log('üìä Teste 4: Verificando saldo atual...');
    const contaAtualizada = await contasService.getContaById(conta.id);
    console.log('‚úÖ Saldo atual:', contaAtualizada?.saldo_atual);
    
    // Teste 5: Listar movimenta√ß√µes
    console.log('üìã Teste 5: Listando movimenta√ß√µes...');
    const movimentacoes = await movimentacoesService.getMovimentacoesByConta(conta.id);
    console.log('‚úÖ Movimenta√ß√µes encontradas:', movimentacoes.length);
    
    // Teste 6: Resumo financeiro
    console.log('üìà Teste 6: Calculando resumo financeiro...');
    const resumo = await movimentacoesService.getResumoMovimentacoes(conta.id);
    console.log('‚úÖ Resumo:', resumo);
    
    console.log('üéâ Todos os testes passaram com sucesso!');
    
    return {
      success: true,
      conta: conta,
      movimentacoes: [movimentacaoEntrada, movimentacaoSaida],
      resumo: resumo
    };
    
  } catch (error) {
    console.error('‚ùå Erro nos testes:', error);
    throw error;
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  testIntegration()
    .then(() => {
      console.log('‚úÖ Testes conclu√≠dos com sucesso!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erro nos testes:', error);
      process.exit(1);
    });
}
