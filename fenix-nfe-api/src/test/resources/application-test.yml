# Configurações de teste para NFe API
spring:
  profiles:
    active: test
  
  # Database de teste
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: 
  
  # JPA/Hibernate
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.H2Dialect
  
  # H2 Console (apenas para testes)
  h2:
    console:
      enabled: true
      path: /h2-console
  
  # RabbitMQ de teste
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    virtual-host: /
    listener:
      simple:
        concurrency: 1
        max-concurrency: 1
        prefetch: 1
  
  # Redis de teste
  redis:
    host: localhost
    port: 6379
    password: 
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
  
  # Cache
  cache:
    type: simple
    cache-names:
      - empresa-config
      - certificado
      - sefaz-config

# Configurações da aplicação
app:
  # JWT
  jwt:
    secret: test-secret-key-for-testing-only
    expiration: 3600000 # 1 hora
    refresh-expiration: 86400000 # 24 horas
  
  # Swagger
  swagger:
    title: Fenix NFe API - Test
    description: API para emissão e gerenciamento de NFe - Ambiente de Teste
    version: 1.0.0-test
    contact:
      name: Fenix Team
      email: test@fenix.com.br
    server:
      url: http://localhost:8080
      description: Servidor de Teste
  
  # Segurança
  security:
    cors:
      allowed-origins:
        - http://localhost:3000
        - http://localhost:8080
      allowed-methods: GET,POST,PUT,DELETE,OPTIONS,PATCH
      allowed-headers: "*"
      allow-credentials: true
      max-age: 3600

# Logging
logging:
  level:
    root: INFO
    br.com.fenix.nfe: DEBUG
    org.springframework: WARN
    org.hibernate: WARN
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG
    org.springframework.test: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# Testcontainers
testcontainers:
  enabled: true
  containers:
    postgres:
      image: postgres:15-alpine
      environment:
        POSTGRES_DB: testdb
        POSTGRES_USER: test
        POSTGRES_PASSWORD: test
      ports:
        - "5432:5432"
    rabbitmq:
      image: rabbitmq:3.12-management-alpine
      environment:
        RABBITMQ_DEFAULT_USER: test
        RABBITMQ_DEFAULT_PASS: test
      ports:
        - "5672:5672"
        - "15672:15672"
    redis:
      image: redis:7-alpine
      ports:
        - "6379:6379"

# Configurações específicas de teste
test:
  # Timeouts
  timeout:
    default: 30s
    long: 60s
  
  # Dados de teste
  data:
    empresa:
      cnpj: "11543862000187"
      nome: "EMPRESA TESTE LTDA"
      ie: "9110691308"
      estado: "PR"
    
    certificado:
      path: "/teste/certificado.pfx"
      password: "teste123"
    
    nfe:
      serie: 32
      numero: 1
      ambiente: "HOMOLOGACAO"
  
  # Mock de serviços externos
  mock:
    sefaz:
      enabled: true
      timeout: 5000
      retry-attempts: 1
    
    certificado:
      enabled: true
      validate: false
