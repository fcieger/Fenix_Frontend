apiVersion: apps/v1
kind: Deployment
metadata:
  name: fenix-nfe-api
  namespace: fenix-nfe
  labels:
    app: nfe-api
    component: api
    version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: nfe-api
      component: api
  template:
    metadata:
      labels:
        app: nfe-api
        component: api
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      serviceAccountName: fenix-nfe-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: nfe-api
        image: fenix-nfe-api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8081
          name: management
          protocol: TCP
        env:
        - name: SPRING_PROFILES_ACTIVE
          valueFrom:
            configMapKeyRef:
              name: fenix-nfe-config
              key: SPRING_PROFILES_ACTIVE
        - name: SERVER_PORT
          valueFrom:
            configMapKeyRef:
              name: fenix-nfe-config
              key: SERVER_PORT
        - name: MANAGEMENT_SERVER_PORT
          valueFrom:
            configMapKeyRef:
              name: fenix-nfe-config
              key: MANAGEMENT_SERVER_PORT
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: fenix-nfe-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: fenix-nfe-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: fenix-nfe-config
              key: DB_NAME
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: fenix-nfe-config
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fenix-nfe-secrets
              key: db-password
        - name: RABBITMQ_HOST
          valueFrom:
            configMapKeyRef:
              name: fenix-nfe-config
              key: RABBITMQ_HOST
        - name: RABBITMQ_PORT
          valueFrom:
            configMapKeyRef:
              name: fenix-nfe-config
              key: RABBITMQ_PORT
        - name: RABBITMQ_USERNAME
          valueFrom:
            configMapKeyRef:
              name: fenix-nfe-config
              key: RABBITMQ_USERNAME
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fenix-nfe-secrets
              key: rabbitmq-password
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: fenix-nfe-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: fenix-nfe-config
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fenix-nfe-secrets
              key: redis-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: fenix-nfe-secrets
              key: jwt-secret
        - name: JWT_EXPIRATION
          valueFrom:
            configMapKeyRef:
              name: fenix-nfe-config
              key: JWT_EXPIRATION
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1"
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: certificates
          mountPath: /app/certificates
        - name: temp
          mountPath: /app/temp
        - name: config
          mountPath: /app/config
        - name: logback-config
          mountPath: /app/logback-spring.xml
          subPath: logback-spring.xml
      volumes:
      - name: logs
        emptyDir: {}
      - name: certificates
        persistentVolumeClaim:
          claimName: fenix-nfe-certificates-pvc
      - name: temp
        emptyDir: {}
      - name: config
        configMap:
          name: fenix-nfe-config
      - name: logback-config
        configMap:
          name: fenix-nfe-logging
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - nfe-api
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: fenix-nfe-api
  namespace: fenix-nfe
  labels:
    app: nfe-api
    component: api
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 8081
    targetPort: 8081
    protocol: TCP
    name: management
  selector:
    app: nfe-api
    component: api
---
apiVersion: v1
kind: Service
metadata:
  name: fenix-nfe-api-headless
  namespace: fenix-nfe
  labels:
    app: nfe-api
    component: api
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 8081
    targetPort: 8081
    protocol: TCP
    name: management
  selector:
    app: nfe-api
    component: api
