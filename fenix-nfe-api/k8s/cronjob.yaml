apiVersion: batch/v1
kind: CronJob
metadata:
  name: fenix-nfe-cleanup
  namespace: fenix-nfe
  labels:
    app: nfe-cleanup
    version: v1.0.0
spec:
  schedule: "0 2 * * *"  # Diariamente às 2h
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: nfe-cleanup
        spec:
          restartPolicy: OnFailure
          containers:
          - name: cleanup
            image: fenix-nfe-api:latest
            command:
            - /bin/sh
            - -c
            - |
              echo "Iniciando limpeza de dados antigos..."
              # Limpar logs antigos (mais de 30 dias)
              kubectl exec -n fenix-nfe deployment/fenix-nfe-api -- curl -X POST http://localhost:8080/actuator/cleanup/logs?days=30
              # Limpar métricas antigas (mais de 90 dias)
              kubectl exec -n fenix-nfe deployment/fenix-nfe-api -- curl -X POST http://localhost:8080/actuator/cleanup/metrics?days=90
              # Limpar cache expirado
              kubectl exec -n fenix-nfe deployment/fenix-nfe-api -- curl -X POST http://localhost:8080/actuator/cleanup/cache
              echo "Limpeza concluída com sucesso"
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "200m"
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: fenix-nfe-backup
  namespace: fenix-nfe
  labels:
    app: nfe-backup
    version: v1.0.0
spec:
  schedule: "0 1 * * *"  # Diariamente às 1h
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 7
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: nfe-backup
        spec:
          restartPolicy: OnFailure
          containers:
          - name: backup
            image: fenix-nfe-api:latest
            command:
            - /bin/sh
            - -c
            - |
              echo "Iniciando backup dos dados..."
              # Backup do banco de dados
              kubectl exec -n fenix-nfe deployment/fenix-nfe-api -- curl -X POST http://localhost:8080/actuator/backup/database
              # Backup das configurações
              kubectl exec -n fenix-nfe deployment/fenix-nfe-api -- curl -X POST http://localhost:8080/actuator/backup/configs
              # Backup dos certificados
              kubectl exec -n fenix-nfe deployment/fenix-nfe-api -- curl -X POST http://localhost:8080/actuator/backup/certificates
              echo "Backup concluído com sucesso"
            resources:
              requests:
                memory: "256Mi"
                cpu: "200m"
              limits:
                memory: "512Mi"
                cpu: "500m"
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: fenix-nfe-health-check
  namespace: fenix-nfe
  labels:
    app: nfe-health-check
    version: v1.0.0
spec:
  schedule: "*/5 * * * *"  # A cada 5 minutos
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 10
  failedJobsHistoryLimit: 5
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: nfe-health-check
        spec:
          restartPolicy: OnFailure
          containers:
          - name: health-check
            image: fenix-nfe-api:latest
            command:
            - /bin/sh
            - -c
            - |
              echo "Executando health check..."
              # Verificar saúde da aplicação
              kubectl exec -n fenix-nfe deployment/fenix-nfe-api -- curl -f http://localhost:8080/actuator/health
              # Verificar métricas
              kubectl exec -n fenix-nfe deployment/fenix-nfe-api -- curl -f http://localhost:8080/actuator/metrics
              echo "Health check concluído com sucesso"
            resources:
              requests:
                memory: "64Mi"
                cpu: "50m"
              limits:
                memory: "128Mi"
                cpu: "100m"
